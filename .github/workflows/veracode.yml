# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will initiate a Veracode Static Analysis Pipeline scan, return a results.json and convert to SARIF for upload as a code scanning alert

name: Veracode Static Analysis Pipeline Scan

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '28 17 * * 1'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
permissions:
  contents: read

jobs:
  # This workflow contains a job to build and submit pipeline scan, you will need to customize the build process accordingly and make sure the artifact you build is used as the file input to the pipeline scan file parameter
  build-and-pipeline-scan:
    # The type of runner that the job will run on
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it and copies all sources into ZIP file for submitting for analysis. Replace this section with your applications build steps
    - uses: actions/checkout@v4
      with:
        repository: ''

    - run: zip -r veracode-scan-target.zip ./

    # download the Veracode Static Analysis Pipeline scan jar
    - run: curl --silent --show-error --fail -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
    - run: unzip -o pipeline-scan-LATEST.zip
#downloading the API wrapper, I updated this to be the most up to date version. It'll output as "veracode-wrapper.jar" 
    - name: Download Veracode Java API Wrapper
      run: wget -O veracode-wrapper.jar https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.4.13.0/vosp-api-wrappers-java-24.4.13.0.jar
    # - name: Download rename wrapper
    #   run: mv vosp-api-wrappers-java-24.4.13.0.jar  veracode-wrapper.jar

#this is for your proxy settings which we should be able to pass through to the veracode command. Configure accordingly and be sure the environment variable listed is created. 
    - name: Set up Proxy Environment Variable
      run: |
        # echo "https_proxy=http://127.0.0.1:8080" >> $GITHUB_ENV
    - uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'temurin'
   #calling on the veracode-wrapper.jar
#vid and vkey are variables that need to be configured as secrets in GH. You can find these on the Veracode platform home page. There is a workflow button on the left "API Credentials". You can swap out the variable name and customize, you know how variables work.
#appname is the name of the app as you want to see it in the platform
#createprofile, leave that on "true". If it doesn't exist, it will be created. If it does exist, the scan will be mapped to the correct profile. 
#Criticality, we need this for the "action" listed. 
#version is the scan name, could be a build number or the in this case, the sha string.
#filepath, where is the compiled artifact we're scanning. 
#env proxy to point back to the proxy configured in the previous step. this is an environment variable opposed to the stored secrets that the API id and key need to be stored as, as it's written.
    - name: Run Veracode Upload and Scan
      run: |
        java -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --fail_on_severity="Very High, High" --file veracode-scan-target.zip --project_name=mycustomapp --app_id=2157406 --verbose=true
        # java -jar veracode-wrapper.jar -action uploadandscan -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} -appname myapp -createprofile true -criticality High -version ${{ github.sha }} -filepath ./
      env:
        https_proxy: user1:passw0rd@123.231.56.23:1234
   
      continue-on-error: true
    - name: Convert pipeline scan output to SARIF format
      id: convert
      uses: veracode/veracode-pipeline-scan-results-to-sarif@ff08ae5b45d5384cb4679932f184c013d34da9be
      with:
        pipeline-results-json: results.json
    - uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: veracode-results.sarif
